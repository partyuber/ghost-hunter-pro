{"dependencies":[{"name":"./DeviceSensor","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"qGIUuPac1yxRtbqmmOkwhGpz/24=","exportNames":["*"],"imports":1}},{"name":"./ExpoLightSensor","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":43},"end":{"line":2,"column":48,"index":91}}],"key":"hcQopsik5gBXKyf3PqQfF1GZCZw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"LightSensor\", {\n    enumerable: true,\n    get: function () {\n      return LightSensor;\n    }\n  });\n  var _DeviceSensor = require(_dependencyMap[0], \"./DeviceSensor\");\n  var DeviceSensor = _interopDefault(_DeviceSensor);\n  var _ExpoLightSensor = require(_dependencyMap[1], \"./ExpoLightSensor\");\n  var ExpoLightSensor = _interopDefault(_ExpoLightSensor);\n  /**\n   * @platform android\n   */\n  class LightSensor extends DeviceSensor.default {\n    /**\n     * > **info** You should always check the sensor availability before attempting to use it.\n     *\n     * Returns whether the light sensor is available and enabled on the device. Requires at least Android 2.3 (API Level 9).\n     *\n     * @return A promise that resolves to a `boolean` denoting the availability of the light sensor.\n     */\n    async isAvailableAsync() {\n      return super.isAvailableAsync();\n    }\n    /**\n     * Subscribe for updates to the light sensor.\n     *\n     * @param listener A callback that is invoked when a LightSensor update is available. When invoked,\n     * the listener is provided a single argument that is the illuminance value.\n     *\n     * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n     */\n    addListener(listener) {\n      return super.addListener(listener);\n    }\n  }\n  var _default = new LightSensor(ExpoLightSensor.default, 'lightSensorDidUpdate');\n});","lineCount":55,"map":[[12,2,29,0,"Object"],[12,8,29,0],[12,9,29,0,"defineProperty"],[12,23,29,0],[12,24,29,0,"exports"],[12,31,29,0],[13,4,29,0,"enumerable"],[13,14,29,0],[14,4,29,0,"get"],[14,7,29,0],[14,18,29,0,"get"],[14,19,29,0],[15,6,29,0],[15,13,29,0,"_default"],[15,21,29,0],[16,4,29,0],[17,2,29,0],[18,2,6,0,"Object"],[18,8,6,0],[18,9,6,0,"defineProperty"],[18,23,6,0],[18,24,6,0,"exports"],[18,31,6,0],[19,4,6,0,"enumerable"],[19,14,6,0],[20,4,6,0,"get"],[20,7,6,0],[20,18,6,0,"get"],[20,19,6,0],[21,6,6,0],[21,13,6,0,"LightSensor"],[21,24,6,0],[22,4,6,0],[23,2,6,0],[24,2,1,0],[24,6,1,0,"_DeviceSensor"],[24,19,1,0],[24,22,1,0,"require"],[24,29,1,0],[24,30,1,0,"_dependencyMap"],[24,44,1,0],[25,2,1,0],[25,6,1,0,"DeviceSensor"],[25,18,1,0],[25,21,1,0,"_interopDefault"],[25,36,1,0],[25,37,1,0,"_DeviceSensor"],[25,50,1,0],[26,2,2,0],[26,6,2,0,"_ExpoLightSensor"],[26,22,2,0],[26,25,2,0,"require"],[26,32,2,0],[26,33,2,0,"_dependencyMap"],[26,47,2,0],[27,2,2,0],[27,6,2,0,"ExpoLightSensor"],[27,21,2,0],[27,24,2,0,"_interopDefault"],[27,39,2,0],[27,40,2,0,"_ExpoLightSensor"],[27,56,2,0],[28,2,3,0],[29,0,4,0],[30,0,5,0],[31,2,6,7],[31,8,6,13,"LightSensor"],[31,19,6,24],[31,28,6,33,"DeviceSensor"],[31,40,6,45],[31,41,6,45,"default"],[31,48,6,45],[31,49,6,46],[32,4,7,4],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,4,14,4],[39,10,14,10,"isAvailableAsync"],[39,26,14,26,"isAvailableAsync"],[39,27,14,26],[39,29,14,29],[40,6,15,8],[40,13,15,15],[40,18,15,20],[40,19,15,21,"isAvailableAsync"],[40,35,15,37],[40,36,15,38],[40,37,15,39],[41,4,16,4],[42,4,17,4],[43,0,18,0],[44,0,19,0],[45,0,20,0],[46,0,21,0],[47,0,22,0],[48,0,23,0],[49,0,24,0],[50,4,25,4,"addListener"],[50,15,25,15,"addListener"],[50,16,25,16,"listener"],[50,24,25,24],[50,26,25,26],[51,6,26,8],[51,13,26,15],[51,18,26,20],[51,19,26,21,"addListener"],[51,30,26,32],[51,31,26,33,"listener"],[51,39,26,41],[51,40,26,42],[52,4,27,4],[53,2,28,0],[54,2,29,0],[54,6,29,0,"_default"],[54,14,29,0],[54,17,29,15],[54,21,29,19,"LightSensor"],[54,32,29,30],[54,33,29,31,"ExpoLightSensor"],[54,48,29,46],[54,49,29,46,"default"],[54,56,29,46],[54,58,29,48],[54,80,29,70],[54,81,29,71],[55,0,29,72],[55,3]],"functionMap":{"names":["<global>","LightSensor","isAvailableAsync","addListener"],"mappings":"AAA;OCK;ICQ;KDE;IES;KFE;CDC"},"hasCjsExports":false},"type":"js/module"}]}