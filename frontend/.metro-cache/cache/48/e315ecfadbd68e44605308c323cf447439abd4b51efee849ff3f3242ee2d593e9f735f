{"dependencies":[{"name":"./DeviceSensor","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"qGIUuPac1yxRtbqmmOkwhGpz/24=","exportNames":["*"],"imports":1}},{"name":"./ExpoBarometer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":43},"end":{"line":2,"column":44,"index":87}}],"key":"6KPt0gP2QPfZzKtaHR2qgUi2K10=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"BarometerSensor\", {\n    enumerable: true,\n    get: function () {\n      return BarometerSensor;\n    }\n  });\n  var _DeviceSensor = require(_dependencyMap[0], \"./DeviceSensor\");\n  var DeviceSensor = _interopDefault(_DeviceSensor);\n  var _ExpoBarometer = require(_dependencyMap[1], \"./ExpoBarometer\");\n  var ExpoBarometer = _interopDefault(_ExpoBarometer);\n  /**\n   * @platform android\n   * @platform ios\n   */\n  class BarometerSensor extends DeviceSensor.default {\n    /**\n     * > **info** You should always check the sensor availability before attempting to use it.\n     *\n     * Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n     * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n     */\n    async isAvailableAsync() {\n      return super.isAvailableAsync();\n    }\n    /**\n     * Subscribe for updates to the barometer.\n     * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `BarometerMeasurement`.\n     *\n     * @example\n     * ```ts\n     * const subscription = Barometer.addListener(({ pressure, relativeAltitude }) => {\n     *   console.log({ pressure, relativeAltitude });\n     * });\n     * ```\n     * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n     */\n    addListener(listener) {\n      return super.addListener(listener);\n    }\n  }\n  var _default = new BarometerSensor(ExpoBarometer.default, 'barometerDidUpdate');\n});","lineCount":59,"map":[[12,2,33,0,"Object"],[12,8,33,0],[12,9,33,0,"defineProperty"],[12,23,33,0],[12,24,33,0,"exports"],[12,31,33,0],[13,4,33,0,"enumerable"],[13,14,33,0],[14,4,33,0,"get"],[14,7,33,0],[14,18,33,0,"get"],[14,19,33,0],[15,6,33,0],[15,13,33,0,"_default"],[15,21,33,0],[16,4,33,0],[17,2,33,0],[18,2,7,0,"Object"],[18,8,7,0],[18,9,7,0,"defineProperty"],[18,23,7,0],[18,24,7,0,"exports"],[18,31,7,0],[19,4,7,0,"enumerable"],[19,14,7,0],[20,4,7,0,"get"],[20,7,7,0],[20,18,7,0,"get"],[20,19,7,0],[21,6,7,0],[21,13,7,0,"BarometerSensor"],[21,28,7,0],[22,4,7,0],[23,2,7,0],[24,2,1,0],[24,6,1,0,"_DeviceSensor"],[24,19,1,0],[24,22,1,0,"require"],[24,29,1,0],[24,30,1,0,"_dependencyMap"],[24,44,1,0],[25,2,1,0],[25,6,1,0,"DeviceSensor"],[25,18,1,0],[25,21,1,0,"_interopDefault"],[25,36,1,0],[25,37,1,0,"_DeviceSensor"],[25,50,1,0],[26,2,2,0],[26,6,2,0,"_ExpoBarometer"],[26,20,2,0],[26,23,2,0,"require"],[26,30,2,0],[26,31,2,0,"_dependencyMap"],[26,45,2,0],[27,2,2,0],[27,6,2,0,"ExpoBarometer"],[27,19,2,0],[27,22,2,0,"_interopDefault"],[27,37,2,0],[27,38,2,0,"_ExpoBarometer"],[27,52,2,0],[28,2,3,0],[29,0,4,0],[30,0,5,0],[31,0,6,0],[32,2,7,7],[32,8,7,13,"BarometerSensor"],[32,23,7,28],[32,32,7,37,"DeviceSensor"],[32,44,7,49],[32,45,7,49,"default"],[32,52,7,49],[32,53,7,50],[33,4,8,4],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,4,14,4],[39,10,14,10,"isAvailableAsync"],[39,26,14,26,"isAvailableAsync"],[39,27,14,26],[39,29,14,29],[40,6,15,8],[40,13,15,15],[40,18,15,20],[40,19,15,21,"isAvailableAsync"],[40,35,15,37],[40,36,15,38],[40,37,15,39],[41,4,16,4],[42,4,17,4],[43,0,18,0],[44,0,19,0],[45,0,20,0],[46,0,21,0],[47,0,22,0],[48,0,23,0],[49,0,24,0],[50,0,25,0],[51,0,26,0],[52,0,27,0],[53,0,28,0],[54,4,29,4,"addListener"],[54,15,29,15,"addListener"],[54,16,29,16,"listener"],[54,24,29,24],[54,26,29,26],[55,6,30,8],[55,13,30,15],[55,18,30,20],[55,19,30,21,"addListener"],[55,30,30,32],[55,31,30,33,"listener"],[55,39,30,41],[55,40,30,42],[56,4,31,4],[57,2,32,0],[58,2,33,0],[58,6,33,0,"_default"],[58,14,33,0],[58,17,33,15],[58,21,33,19,"BarometerSensor"],[58,36,33,34],[58,37,33,35,"ExpoBarometer"],[58,50,33,48],[58,51,33,48,"default"],[58,58,33,48],[58,60,33,50],[58,80,33,70],[58,81,33,71],[59,0,33,72],[59,3]],"functionMap":{"names":["<global>","BarometerSensor","BarometerSensor#isAvailableAsync","BarometerSensor#addListener"],"mappings":"AAA;OCM;ICO;KDE;IEa;KFE;CDC"},"hasCjsExports":false},"type":"js/module"}]}