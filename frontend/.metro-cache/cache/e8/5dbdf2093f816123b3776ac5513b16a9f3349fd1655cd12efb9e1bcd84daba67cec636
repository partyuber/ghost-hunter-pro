{"dependencies":[{"name":"./DeviceSensor","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"qGIUuPac1yxRtbqmmOkwhGpz/24=","exportNames":["*"],"imports":1}},{"name":"./ExponentMagnetometer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":43},"end":{"line":2,"column":58,"index":101}}],"key":"MUwSBxgn7iDFWrZqAHiODpR8eUQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"MagnetometerSensor\", {\n    enumerable: true,\n    get: function () {\n      return MagnetometerSensor;\n    }\n  });\n  var _DeviceSensor = require(_dependencyMap[0], \"./DeviceSensor\");\n  var DeviceSensor = _interopDefault(_DeviceSensor);\n  var _ExponentMagnetometer = require(_dependencyMap[1], \"./ExponentMagnetometer\");\n  var ExponentMagnetometer = _interopDefault(_ExponentMagnetometer);\n  /**\n   * @platform android\n   * @platform ios\n   */\n  class MagnetometerSensor extends DeviceSensor.default {\n    /**\n     * > **info** You should always check the sensor availability before attempting to use it.\n     *\n     * Check the availability of the device magnetometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n     * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n     */\n    async isAvailableAsync() {\n      return super.isAvailableAsync();\n    }\n    /**\n     * Subscribe for updates to the magnetometer.\n     * @param listener A callback that is invoked when a magnetometer update is available.\n     * When invoked, the listener is provided with a single argument that is `MagnetometerMeasurement`.\n     * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n     */\n    addListener(listener) {\n      return super.addListener(listener);\n    }\n  }\n  var _default = new MagnetometerSensor(ExponentMagnetometer.default, 'magnetometerDidUpdate');\n});","lineCount":53,"map":[[12,2,27,0,"Object"],[12,8,27,0],[12,9,27,0,"defineProperty"],[12,23,27,0],[12,24,27,0,"exports"],[12,31,27,0],[13,4,27,0,"enumerable"],[13,14,27,0],[14,4,27,0,"get"],[14,7,27,0],[14,18,27,0,"get"],[14,19,27,0],[15,6,27,0],[15,13,27,0,"_default"],[15,21,27,0],[16,4,27,0],[17,2,27,0],[18,2,7,0,"Object"],[18,8,7,0],[18,9,7,0,"defineProperty"],[18,23,7,0],[18,24,7,0,"exports"],[18,31,7,0],[19,4,7,0,"enumerable"],[19,14,7,0],[20,4,7,0,"get"],[20,7,7,0],[20,18,7,0,"get"],[20,19,7,0],[21,6,7,0],[21,13,7,0,"MagnetometerSensor"],[21,31,7,0],[22,4,7,0],[23,2,7,0],[24,2,1,0],[24,6,1,0,"_DeviceSensor"],[24,19,1,0],[24,22,1,0,"require"],[24,29,1,0],[24,30,1,0,"_dependencyMap"],[24,44,1,0],[25,2,1,0],[25,6,1,0,"DeviceSensor"],[25,18,1,0],[25,21,1,0,"_interopDefault"],[25,36,1,0],[25,37,1,0,"_DeviceSensor"],[25,50,1,0],[26,2,2,0],[26,6,2,0,"_ExponentMagnetometer"],[26,27,2,0],[26,30,2,0,"require"],[26,37,2,0],[26,38,2,0,"_dependencyMap"],[26,52,2,0],[27,2,2,0],[27,6,2,0,"ExponentMagnetometer"],[27,26,2,0],[27,29,2,0,"_interopDefault"],[27,44,2,0],[27,45,2,0,"_ExponentMagnetometer"],[27,66,2,0],[28,2,3,0],[29,0,4,0],[30,0,5,0],[31,0,6,0],[32,2,7,7],[32,8,7,13,"MagnetometerSensor"],[32,26,7,31],[32,35,7,40,"DeviceSensor"],[32,47,7,52],[32,48,7,52,"default"],[32,55,7,52],[32,56,7,53],[33,4,8,4],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,4,14,4],[39,10,14,10,"isAvailableAsync"],[39,26,14,26,"isAvailableAsync"],[39,27,14,26],[39,29,14,29],[40,6,15,8],[40,13,15,15],[40,18,15,20],[40,19,15,21,"isAvailableAsync"],[40,35,15,37],[40,36,15,38],[40,37,15,39],[41,4,16,4],[42,4,17,4],[43,0,18,0],[44,0,19,0],[45,0,20,0],[46,0,21,0],[47,0,22,0],[48,4,23,4,"addListener"],[48,15,23,15,"addListener"],[48,16,23,16,"listener"],[48,24,23,24],[48,26,23,26],[49,6,24,8],[49,13,24,15],[49,18,24,20],[49,19,24,21,"addListener"],[49,30,24,32],[49,31,24,33,"listener"],[49,39,24,41],[49,40,24,42],[50,4,25,4],[51,2,26,0],[52,2,27,0],[52,6,27,0,"_default"],[52,14,27,0],[52,17,27,15],[52,21,27,19,"MagnetometerSensor"],[52,39,27,37],[52,40,27,38,"ExponentMagnetometer"],[52,60,27,58],[52,61,27,58,"default"],[52,68,27,58],[52,70,27,60],[52,93,27,83],[52,94,27,84],[53,0,27,85],[53,3]],"functionMap":{"names":["<global>","MagnetometerSensor","MagnetometerSensor#isAvailableAsync","MagnetometerSensor#addListener"],"mappings":"AAA;OCM;ICO;KDE;IEO;KFE;CDC"},"hasCjsExports":false},"type":"js/module"}]}